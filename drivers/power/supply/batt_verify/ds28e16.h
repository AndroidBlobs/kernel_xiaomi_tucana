// DS28E16.h - Include file for DS28E16/DS28E50?
//
#ifndef __DS28E16_H__
#define __DS28E16_H__

#define ERROR_NO_DEVICE					-1
#define ERROR_R_STATUS					-2
#define ERROR_R_ROMID					-3
#define ERROR_R_PAGEDATA				-4
#define ERROR_COMPUTE_MAC				-5
#define ERROR_S_SECRET					-6
#define ERROR_UNMATCH_MAC				-7
#define DS_TRUE						1
#define DS_FALSE					0

#define CMD_RELEASE_BYTE				0xAA
// 1-wire ROM commands
#define CMD_SEARCH_ROM					0xF0
#define CMD_READ_ROM					0x33
#define CMD_MATCH_ROM					0x55
#define CMD_SKIP_ROM					0xCC
#define CMD_RESUME_ROM					0xA5

// DS28E16 commands
#define CMD_START					0x66
#define CMD_WRITE_MEM					0x96
#define CMD_READ_MEM					0x44
#define CMD_READ_STATUS					0xAA
#define CMD_SET_PAGE_PROT				0xC3
#define CMD_DECREMENT_CNT				0xC9
#define CMD_COMP_S_SECRET				0x3C
#define CMD_READ_RNG					0xD2
#define CMD_COMP_READ_AUTH				0xA5
#define CMD_DISABLE_DEVICE				0x33
#define CMD_RELEASE_BYTE           			0xAA

// Result bytes
#define RESULT_SUCCESS				0xAA
#define RESULT_FAIL_PROTECTION			0x55
#define RESULT_FAIL_PARAMETETER			0x77
#define RESULT_FAIL_INVALID_SEQUENCE		0x33
#define RESULT_FAIL_VERIFY			0x00
#define RESULT_FAIL_COMMUNICATION		0x11
#define RESULT_FAIL_NONE			0xFF

// one-wire ROM commands
#define SKIP_ROM	0xCC
#define READ_ROM	0x33

#define MAXIM_CRC16_RESULT			0xB001
#define DS28EL16_MAXIM_PAGE0			0
#define DS28EL16_MAXIM_PAGE1			1
#define DS28EL16_MAX_USABLE_PAGE		1
#define DS28EL16_MAX_PAGE			3

//retry times config
#define SET_SRAM_RETRY				4
#define GET_USER_MEMORY_RETRY			8
#define GET_PERSONALITY_RETRY			8
#define GET_ROM_ID_RETRY			8
#define GET_BLOCK_STATUS_RETRY			8
#define SET_BLOCK_STATUS_RETRY			8
#define GET_MAC_RETRY				8
#define GET_VERIFY_RETRY			8
#define GET_S_SECRET_RETRY			4

// Delays
#define DELAY_DS28E16_EE_WRITE			100
#define DELAY_DS28E16_EE_READ			50
#define DELAY_DS28E16_RNG_READ			40
#define DELAY_DS28E16_ENC_READ			40

// Offset into ROM options page
#define OFFSET_ROM_RBD					0x00
#define OFFEST_ROM_ANON					0x01
#define OFFSET_ROM_MANID				0x22
#define OFFSET_ROM_ROM					0x24

// Secrets
#define SECRET							0x00
#define SECRET_S						0x02

// 1-Wire selection methods
#define SELECT_SKIP						0
#define SELECT_RESUME					1
#define SELECT_MATCH					2
#define SELECT_ODMATCH					3
#define SELECT_SEARCH					4
#define SELECT_READROM					5
#define SELECT_ODSKIP					6

//DS28E16
#define PROT_RP							0x01
#define PROT_WP							0x02
#define PROT_WP_RP						0x03
#define PROT_DC							0x08

//page number
#define PAGE0							0x00
#define PAGE1							0x01
#define DC_PAGE							0x02
#define SECRET_PAGE						0x03
#define MAX_PAGENUM						0x04

// misc constants
#define TRUE    1
#define FALSE   0

//#define WP    0x02
//#define RP    0x01
//#define RP_WP 0x03
//#define DC    0x08

#define MAC_MATCH						1
#define ANONYMOUS						1

#define MAXIM_SESSION_SEED_LEN		32
#define MAXIM_SSECRET_LEN		32
#define MAXIM_RANDOM_LEN		32
#define MAXIM_SHA3256_LEN		10

#define WRITE_FUNCTION 0
#define READ_FUNCTION

#define DC_INIT_VALUE			0x1FFFF
#define BATT_VERIFY_VOTER		"BATT_VERIFY_VOTER"
#define BATT_UNVERIFY_CURR		2000000

#define ds_info pr_info
#define ds_dbg  pr_debug
#define ds_err  pr_err
#define ds_log  pr_err

extern unsigned char ow_reset(void);
extern unsigned char read_byte(void);
extern void write_byte(char val);
extern void Delay_us(unsigned int T);

struct ds28e16_data {
	struct platform_device *pdev;
	struct device *dev;
	int version;
	int cycle_count;
	bool batt_verified;
	struct delayed_work	battery_verify_work;
	struct power_supply	*batt_verify_psy;
	struct power_supply	*bms_psy;
	struct power_supply	*usb_psy;
	struct votable		*fcc_votable;
};

static struct class *ds28e16_class;
static int ds28e16_major;

static int ds28e16_detected;
static struct ds28e16_data *g_ds28e16_data;

unsigned int attr_trytimes = 1;
int pagenumber = 1;
int auth_ANON = 1;
int auth_BDCONST = 1;
unsigned char session_seed[32] = {
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA};
unsigned char S_secret[32] = {
	0x0C, 0x99, 0x2B, 0xD3, 0x95, 0xDB, 0xA0, 0xB4,
	0xEF, 0x07, 0xB3, 0xD8, 0x75, 0xF3, 0xC7, 0xAE,
	0xDA, 0xC4, 0x41, 0x2F, 0x48, 0x93, 0xB5, 0xD9,
	0xE1, 0xE5, 0x4B, 0x20, 0x9B, 0xF3, 0x77, 0x39};
unsigned char challenge[32] = {0x00};

int tm = 1;
int value;
int owdebug;
unsigned short CRC16;
unsigned char ROM_NO[8] = {0x00};
unsigned char MANID[2] = {0x00};

// last result byte
unsigned char last_result_byte = RESULT_SUCCESS;
// extenral debug and delay functions
int FAIL_ON_WRONG_READ_LEN = 1;
const short oddparity[16] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0 };

unsigned char ds28e16_session_seed[MAXIM_SHA3256_LEN][MAXIM_SESSION_SEED_LEN] = {
	{0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA},
	{0x00, 0x12, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA},
	{0xAA, 0xAA, 0x12, 0x23, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA},
	{0x00, 0x12, 0x20, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA},
	{0x00, 0x12, 0x20, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	 0xAA, 0x78, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xF4, 0xAA, 0xAA, 0xF0, 0xAA, 0xAA, 0xAA, 0xAA},
	{0x00, 0x12, 0x20, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	 0xAA, 0x78, 0x00, 0xAA, 0x16, 0x18, 0xAA, 0xAA, 0xF4, 0xAA, 0xAA, 0xF0, 0xAA, 0xAA, 0xAA, 0xAA},
	{0x00, 0x12, 0x20, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	 0xAA, 0x78, 0x00, 0xAA, 0x16, 0x18, 0x10, 0xAA, 0xF4, 0xAA, 0xAA, 0xF0, 0xAA, 0xAA, 0xAA, 0xAA},
	{0x00, 0x12, 0x20, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
	 0xAA, 0x78, 0x00, 0xAA, 0x16, 0x18, 0x10, 0x16, 0xF4, 0xAA, 0xAA, 0xF0, 0xAA, 0xAA, 0xAA, 0xAA},
	{0x00, 0x12, 0x20, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xBB, 0xAA, 0xAA, 0xAA, 0xAA,
	 0xAA, 0x78, 0x00, 0xAB, 0x16, 0x18, 0x10, 0x16, 0xF4, 0xAA, 0xAA, 0xF0, 0xAA, 0xAA, 0xAA, 0xAA},
	{0x00, 0x12, 0x20, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xBB, 0xAA, 0xAA, 0xAA, 0xAA,
	 0xAA, 0x78, 0x00, 0xAB, 0x16, 0x18, 0x10, 0x16, 0xF4, 0xAA, 0xAA, 0xF0, 0xAA, 0xCC, 0xAA, 0xAA},
};

unsigned char ds28e16_s_secret[MAXIM_SHA3256_LEN][MAXIM_SSECRET_LEN] = {
	{0xB8, 0xD3, 0x05, 0x01, 0xD1, 0x38, 0x6A, 0xA2, 0x99, 0x3D, 0xC4, 0xED, 0x87, 0x8C, 0xE7, 0xF9,
	 0xF2, 0x65, 0x65, 0xE6, 0xF7, 0x26, 0x79, 0xF1, 0x4B, 0xEB, 0x24, 0xB4, 0xD8, 0x61, 0xA7, 0x6B},
	{0x46, 0x84, 0x55, 0x22, 0x86, 0x49, 0x2E, 0x4D, 0x4F, 0xDA, 0x4D, 0x77, 0x09, 0xB8, 0xFC, 0xBB,
	 0xE1, 0x35, 0x14, 0x2F, 0xB4, 0x82, 0x75, 0x59, 0xFC, 0xD5, 0x7B, 0x67, 0x61, 0xF3, 0xDB, 0x83},
	{0x66, 0x46, 0xC4, 0x6B, 0x14, 0x9E, 0x99, 0xEA, 0xA3, 0xBE, 0xDB, 0x55, 0x8F, 0x5D, 0xCC, 0x89,
	 0x61, 0x39, 0x76, 0x29, 0x28, 0xF6, 0x79, 0xD4, 0x31, 0x3C, 0xD6, 0x44, 0x05, 0xCC, 0xEA, 0xC0},
	{0x15, 0xED, 0x65, 0x81, 0x50, 0x18, 0x92, 0x3B, 0x77, 0x94, 0x24, 0x80, 0x52, 0xF4, 0xCD, 0x31,
	 0x38, 0x89, 0x8D, 0x7F, 0x05, 0xF8, 0x58, 0x47, 0x09, 0xA7, 0x12, 0xB9, 0x0A, 0x60, 0x85, 0x9C},
	{0x4B, 0xFE, 0xA5, 0x6A, 0x7B, 0x4A, 0x8A, 0x29, 0xDE, 0x35, 0x24, 0x18, 0xC7, 0x5B, 0xFC, 0x1E,
	 0x2F, 0x56, 0x27, 0xAC, 0x6F, 0x61, 0xDB, 0xA5, 0x33, 0xAE, 0x07, 0x9E, 0x73, 0x10, 0x61, 0xF6},
	{0x8A, 0xF6, 0x5B, 0x27, 0x49, 0xCD, 0xC1, 0x48, 0x53, 0xD9, 0x8A, 0x77, 0x88, 0x64, 0x6B, 0xEC,
	 0xE9, 0xA8, 0xD5, 0x21, 0x76, 0x63, 0x27, 0x86, 0x10, 0x93, 0xF6, 0x78, 0xD5, 0x5D, 0x2F, 0x30},
	{0xBB, 0x47, 0x25, 0xEF, 0xA2, 0x63, 0xAF, 0xE0, 0x08, 0x93, 0xC3, 0xAE, 0x7D, 0x36, 0x5C, 0x53,
	 0x35, 0x04, 0x70, 0x9A, 0xA9, 0x4C, 0x7A, 0x0A, 0x47, 0xA5, 0x30, 0xF8, 0x12, 0xE3, 0xB7, 0x94},
	{0x93, 0x4C, 0x8D, 0x33, 0xEE, 0x7E, 0x01, 0xE4, 0x6F, 0x17, 0xD9, 0x3B, 0x91, 0x6C, 0xE2, 0x52,
	 0x13, 0x3F, 0xA8, 0x44, 0xC7, 0xA6, 0xCB, 0x19, 0x2F, 0x70, 0xEF, 0xCE, 0xCE, 0x40, 0xE3, 0x17},
	{0x88, 0xF0, 0xE3, 0xFA, 0xC0, 0x85, 0x5C, 0x67, 0xA2, 0x9D, 0x3E, 0xE4, 0x3C, 0x1C, 0xDD, 0x4D,
	 0x2D, 0x69, 0x60, 0x2F, 0x6C, 0xAA, 0x14, 0xDF, 0x5E, 0x92, 0x73, 0xE0, 0x4A, 0xFC, 0x1F, 0xD3},
	{0x87, 0xA2, 0xC2, 0x9B, 0x00, 0x05, 0x50, 0x03, 0x2F, 0x50, 0x03, 0x1C, 0x02, 0x81, 0xAD, 0x1B,
	 0x96, 0xF6, 0x77, 0x42, 0x2D, 0x29, 0xE4, 0xB0, 0xFB, 0x62, 0xDF, 0x31, 0x4C, 0x21, 0xBC, 0x65},
};

/* Command Functions (no high level verification) */
/* pg=0,1,2页面，一次必须完整写入16个字节 */
int DS28E16_cmd_writeMemory(int pg, unsigned char *data);
/* pg=0,1,2页面，一次读入32个字节，前16个字节为有效数据，后续16个字节固定为0x00或0xFF */
int DS28E16_cmd_readMemory(int pg, unsigned char *data);
/* 执行此函数，完成17位计数器减1操作 */
//int DS28E16_cmd_decrementCounter(void);
/* 读入芯片的页面保护属性、一个MAN_ID字节和一个芯片版本字节，合计6个字节 */
int DS28E16_cmd_readStatus(unsigned char *data);
/* 设置芯片的页面属性 */
int DS28E16_cmd_setStatus(int pg, unsigned char prot);
/* 芯片自毁，不能恢复 */
int DS28E16_cmd_device_disable(int op, unsigned char *password);
/*器件基于会话密码、随机数、页面数据和ROMID，返回器件的算法结果*/
int DS28E16_cmd_computeReadPageAuthentication(int anon, int pg,
					unsigned char *challenge, unsigned char *hmac);
/*基于主机发送的密钥种子，器件在内部计算出会话密码*/
int DS28E16_cmd_computeS_Secret(int anon, int bdconst, int pg, unsigned char *partial);

int DS28E16_standard_cmd_flow(unsigned char *write_buf, int delay_ms,
				unsigned char *read_buf, int *read_len, int write_len);
unsigned short docrc16(unsigned short data);

// 1-Wire ROMID commands
short Read_RomID(unsigned char *RomID);

/* host functions */
/*
void Host_computeS_Secret(int anon, int bdconst, int PageNum, unsigned char *bind_data,
			unsigned char *partial, unsigned char *mSecret, unsigned char *ComputedS_Secret);
*/
int AuthenticateDS28E16(int anon, int bdconst, int S_Secret_PageNum, int PageNum,
			unsigned char *Challenge, unsigned char *Secret_Seeds, unsigned char *S_Secret);

static int ds28el16_Read_RomID_retry(unsigned char *RomID);
static int ds28el16_get_page_status_retry(unsigned char *data);
static int DS28E16_cmd_computeS_Secret_retry(int anon, int bdconst,
					int pg, unsigned char *session_seed);
static int DS28E16_cmd_computeReadPageAuthentication_retry(int anon, int pg,
					unsigned char *challenge, unsigned char *hmac);
static int ds28el16_get_page_data_retry(int page, unsigned char *data);
#endif
